=== client.go

This is a golang redigo based redis client that can be used to open (many)
concurrent connections to a redis server, with socket lingering off. Due to
this, the client gets to close all open concurrent connections as soon as
possible, without the sockets entering TIME_WAIT state.

redigo-solinger $ ./client -h
Usage of ./client:
  -cps=5: # concurrent clients per second
  -durs=60: # duration in seconds, of the entire run
  -gaps=5: # gap in seconds between concurrent bursts

===

In order to achieve this sort of concurrency, the following changes are
suggested on the client side:

1. Increase soft & hard limits on open FDs for root & normal users

	ubuntu@redigo-client:~$ tail -7 /etc/security/limits.conf

	*    soft nofile 64000
	*    hard nofile 64000
	root soft nofile 64000
	root hard nofile 64000

	# End of file

2. Enable the limits in /etc/pam.d/common-session and /etc/pam.d/common-session-noninteractive by adding this line:

session required pam_limits.so

===

And on the (redis) server m/c:

1. Increase FDs as on the client side

2. Increase maximum client connections in redis.conf as apt

3. And tune system networking as follows
	ubuntu@redis-ports:~$ tail -27 /etc/sysctl.conf

	# Allow reuse of sockets in TIME_WAIT state for new connections
	# only when it is safe from the network stackâ€™s perspective.
	net.ipv4.tcp_tw_reuse = 1

	# pending connections are kept in a socket buffer; 500K per socket
	#
	net.core.rmem_max = 500000
	net.core.wmem_max = 500000

	# Increase the number of outstanding syn requests allowed.
	# c.f. The use of syncookies.
	net.ipv4.tcp_max_syn_backlog = 10000
	net.ipv4.tcp_syncookies = 1

	# The maximum number of "backlogged sockets".  Default is 128.
	net.core.somaxconn = 10000

	# How may times to retry before killing TCP connection, closed by our side.
	# Avoids too many sockets in FIN-WAIT-1 state (default 0 which means 8!).
	# (see also: /proc/sys/net/ipv4/tcp_max_orphans)
	net.ipv4.tcp_orphan_retries = 1

	# Time to hold socket in state FIN-WAIT-2, if it was closed by our side
	# Reduces time for sockets to be in FIN-WAIT-2 state (default 60secs).
	net.ipv4.tcp_fin_timeout = 30
	#
	
	# Memory overcommit enabled as per the following recommendation from Redis
        # 939:M 08 Jul 07:06:49.189 # WARNING overcommit_memory is set to 0!
        # Background save may fail under low memory condition. To fix this issue add
        # 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or
        # run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
        vm.overcommit_memory = 1
        #
        vm.swappiness = 0

	ubuntu@redis-ports:~$

	And run 'sysctl -p' after modifying sysctl.conf as above

==== 

Files found here:

./README: This one.

./client.go: The client program described above.

./limits.conf: Shows how FDs are to be increased in /etc/security/limits.conf

./sysctl.conf: Shows how networking is be to configured in /etc/security/limits.conf. Note that 'sysctl -p' is to be run after making this mod.

monitor-redis-conns: Run it on both the client & redis server as:
	$ ~/bin/monitor-redis-conns > ~/tmp/redis-load.op 2>&1 &
	$ # remember to stop the monitor after the load test ends

client: Run it as
	$ ./client -h
	$ ./client -cps 8000 -durs 20 > ~/tmp/op 2>&1 &


=== some notes on configuring systems for large #concurrent connections

https://www.3scale.net/2015/04/how-to-load-test-and-tune-performance-on-your-api-part-i/

https://groups.google.com/forum/#!topic/golang-nuts/coc6bAl2kPM

http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/

https://www.iron.io/how-we-went-from-30-servers-to-2-go/

Redis tuning: http://shokunin.co/blog/2014/11/11/operational_redis.html


Client ports, IP aliasing, kernel memory tuning ...:
* https://mrotaru.wordpress.com/2013/10/10/scaling-to-12-million-concurrent-connections-how-migratorydata-did-it/

TIME_WAIT:
* https://vincent.bernat.im/en/blog/2014-tcp-time-wait-state-linux.html
* http://www.serverframework.com/asynchronousevents/2011/01/time-wait-and-its-design-implications-for-protocols-and-scalable-servers.html

SO_LINGER:
* http://jiajizhou.com/2015/05/17/a-simple-http-load-testing-client-in-go.html
* http://stackoverflow.com/questions/3757289/tcp-option-so-linger-zero-when-its-required

Redigo and TCP socket options:
* https://github.com/garyburd/redigo/issues/104
tc, err := net.DialTCP("tcp", nil, addr)
if err != nil {
    // handle error
}
if err := tc.SetKeepAlive(true); err != nil {
   // handle error
}
if err := tc.SetKeepAlivePeriod(d); err != nil {
  // handle error
}
c := redis.NewConn(tc, readTimeout, writeTimeout)

SOCKET BACKLOG:
http://stackoverflow.com/questions/410616/increasing-the-maximum-number-of-tcp-ip-connections-in-linux

FILE DESCRIPTORS / ULIMIT:
https://underyx.me/2015/05/18/raising-the-maximum-number-of-file-descriptors

SOCKET MEMORY / ORPHANS:
http://www.linux-admins.net/2013/01/troubleshooting-out-of-socket-memory.html

KERNEL TCP TUNING PARAMS:
http://www.tldp.org/HOWTO/Adv-Routing-HOWTO/lartc.kernel.obscure.html

# End-of-file
